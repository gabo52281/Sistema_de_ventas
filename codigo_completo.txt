
----- .\src\App.jsx -----
import React from 'react'
import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'
import { AuthProvider, AuthContext } from './context/AuthContext'
import Login from './pages/Login'
import Dashboard from './pages/Dashboard'
import Productos from './pages/Productos'
import Clientes from './pages/Clientes'
import Facturas from './pages/Facturas'
import AdminPanel from './pages/AdminPanel'
import { UIProvider } from './context/UIContext'
import { ToastProvider } from './context/ToastContext'
import FacturasList from './pages/FacturasList'
import Home from './pages/Home'
import Empleados from './pages/Empleados'
import Reportes from './pages/Reportes'

const PrivateRoute = ({ children, roles = [] }) => {
  const { user } = React.useContext(AuthContext)
  if (!user) return <Navigate to="/login" replace />
  if (roles.length && !roles.includes(user.rol)) return <Navigate to="/dashboard" replace />
  return children
}

const PublicRoute = ({ children }) => {
  const { user } = React.useContext(AuthContext)
  if (user) return <Navigate to="/dashboard" replace />
  return children
}



export default function App() {
  return (
      <UIProvider>
  <ToastProvider>
  <AuthProvider>
      <BrowserRouter>
        <Routes>
          <Route path="/login" element={<PublicRoute><Login /></PublicRoute>} />
          <Route path="/" element={<PublicRoute><Home /></PublicRoute>} />
          <Route path="/dashboard" element={<PrivateRoute roles={["admin", "superadmin", "cajero", "vendedor"]}><Dashboard /></PrivateRoute>} />
          <Route path="/reportes" element={ <PrivateRoute roles={["admin"]}><Reportes /></PrivateRoute>} />

          <Route path="/empleados" element={<PrivateRoute roles={["admin"]}><Empleados /></PrivateRoute>} />
          <Route path="/productos" element={<PrivateRoute roles={["admin"]}><Productos /></PrivateRoute>} />
          <Route path="/clientes" element={<PrivateRoute roles={["admin","cajero"]}><Clientes /></PrivateRoute>} />
          <Route path="/facturas" element={<PrivateRoute roles={["cajero","vendedor"]}><Facturas /></PrivateRoute>} />
          <Route path="/facturas/ver" element={<PrivateRoute roles={["admin","vendedor","cajero"]}><FacturasList /></PrivateRoute>} />
         <Route path="/admin" element={<PrivateRoute roles={["superadmin",]}><AdminPanel /></PrivateRoute>} />

        </Routes>
      </BrowserRouter>
      </AuthProvider>
      </ToastProvider>
    </UIProvider>
  )
}
----- .\src\main.jsx -----
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
)

----- .\src\components\DataTable.jsx -----
import React from 'react'

// DataTable minimal y reutilizable
// Props:
// - columns: [{ key, label, className, render? }]
// - data: array
// - rowKey: string
// - actions: (row) => JSX

const DataTable = ({ columns = [], data = [], rowKey = 'id', actions = null }) => {
  return (
    <div className="bg-white rounded shadow overflow-auto">
      <table className="min-w-full w-full table-fixed text-sm">
        <thead className="bg-gray-100">
          <tr>
            {columns.map(col => (
              <th key={col.key} className={`p-2 ${col.className || 'text-left align-middle'}`}>{col.label}</th>
            ))}
            {actions && <th className="p-2 w-48 text-left align-middle">Acciones</th>}
          </tr>
        </thead>
        <tbody>
          {data.map(row => (
            <tr key={row[rowKey]} className="border-t hover:bg-gray-50">
              {columns.map(col => (
                <td key={col.key} className={`p-2 ${col.cellClass || ''}`}>
                  {col.render ? col.render(row) : row[col.key]}
                </td>
              ))}
              {actions && (
                <td className="p-2">
                  <div className="flex items-center space-x-3">
                    {actions(row)}
                  </div>
                </td>
              )}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  )
}

export default DataTable

----- .\src\components\Navbar.jsx -----
import React, { useContext } from 'react'
import { Link, useNavigate } from 'react-router-dom'
import { AuthContext } from '../context/AuthContext'
import { UIContext } from '../context/UIContext'
import { Menu } from 'lucide-react'

const Navbar = () => {
  const { user, logout } = useContext(AuthContext)
  const { toggleSidebar } = useContext(UIContext)
  const navigate = useNavigate()

  const handleLogout = () => {
    logout()
    navigate('/login')
  }

  // Texto central basado en el rol
  const getCenterText = () => {
    if (!user) return 'Sistema de Ventas POS e Inventario'

    switch (user.rol) {
      case 'superadmin':
        return 'Panel de Superadministrador'
      case 'admin':
        return 'Panel de Administración'
      case 'cajero':
        return 'Panel de Caja'
      case 'vendedor':
        return 'Panel de Ventas'
      default:
        return 'Sistema de Ventas POS e Inventario'
    }
  }

  return (
    <header className="bg-white shadow-sm border-b">
      <div className="max-w-7xl mx-auto px-4 py-3 flex items-center justify-between">
        {/* Izquierda */}
        <div className="flex items-center gap-3">
          {user && (
            <button
              onClick={toggleSidebar}
              className="md:hidden p-2 rounded hover:bg-gray-100"
            >
              <Menu className="w-6 h-6 text-gray-700" />
            </button>
          )}
          <h1 className="text-xl font-bold text-blue-600">
            Sistema de Ventas POS e Inventario
          </h1>
        </div>

        {/* Centro */}
        <div className="hidden md:block text-gray-700 text-sm font-medium">
          {getCenterText()}
        </div>

        {/* Derecha */}
        <div className="flex items-center gap-3">
          {user && (
            <div className="text-sm text-gray-600">
              👤 {user.nombre || 'Usuario'}
              {user.nombre_negocio && (
                <div className="text-2xl text-amber-600"> {user.nombre_negocio}</div>
              )}
            </div>
          )}
          {user ? (
            <button
              onClick={handleLogout}
              className="bg-red-600 text-white px-3 py-1 rounded hover:bg-red-700 transition"
            >
              Salir
            </button>
          ) : (
            <Link
              to="/login"
              className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 transition"
            >
              Entrar
            </Link>
          )}
        </div>
      </div>
    </header>
  )
}

export default Navbar

----- .\src\components\SearchBar.jsx -----
import React from 'react'

const SearchBar = ({ value, onChange, placeholder = "Buscar..." }) => (
  <input
    type="text"
    value={value}
    onChange={(e) => onChange(e.target.value)}
    placeholder={placeholder}
    className="border p-2 rounded w-full mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
  />
)

export default SearchBar

----- .\src\components\Sidebar.jsx -----
import React, { useContext } from 'react'
import { NavLink } from 'react-router-dom'
import { AuthContext } from '../context/AuthContext'
import { UIContext } from '../context/UIContext'
import { appRoutes } from '../routes_config'

const Sidebar = () => {
  const { user } = useContext(AuthContext)
  const { sidebarOpen, closeSidebar } = useContext(UIContext)
  if (!user) return null

  const { rol } = user



  return (
    <>
      {/* Fondo semitransparente (solo móvil) */}
      {sidebarOpen && (
        <div
          className="fixed inset-0 bg-black bg-opacity-30 z-40 md:hidden"
          onClick={closeSidebar}
        />
      )}

      {/* Sidebar */}
      <aside
        className={`fixed top-0 left-0 h-full w-64 bg-white border-r z-50 transform transition-transform duration-300 
        ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'} 
        md:translate-x-0 md:static md:block`}
      >
        <nav className="p-4 space-y-2">
          {appRoutes
            .filter((r) => r.roles.includes(rol)) // ← solo las permitidas
            .map((r) => (
              <NavLink
                key={r.path}
                to={r.path}
                onClick={closeSidebar}
                className={({ isActive }) =>
                  isActive
                    ? 'block p-2 rounded bg-blue-50 text-blue-700 font-semibold'
                    : 'block p-2 rounded hover:bg-gray-50'
                }
              >
                {r.label}
              </NavLink>
            ))}
        </nav>
      </aside>
    </>
  )
}

export default Sidebar

----- .\src\components\ToastContainer.jsx -----
import React, { useContext } from 'react'
import { ToastContext } from '../context/ToastContext'

const ToastContainer = () => {
  const { toasts, removeToast } = useContext(ToastContext)

  return (
    <div className="fixed right-4 bottom-4 flex flex-col gap-2 z-50">
      {toasts.map(t => (
        <div key={t.id} className={`px-4 py-2 rounded shadow ${t.type === 'error' ? 'bg-red-500 text-white' : t.type === 'success' ? 'bg-green-500 text-white' : 'bg-gray-800 text-white'}`}>
          <div className="flex items-center justify-between gap-4">
            <div>{t.message}</div>
            <button onClick={() => removeToast(t.id)} className="text-sm opacity-80">x</button>
          </div>
        </div>
      ))}
    </div>
  )
}

export default ToastContainer

----- .\src\context\AuthContext.jsx -----
import React, { createContext, useState, useEffect } from 'react'
import api from '../api/axios'

export const AuthContext = createContext()

export const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(() => {
    const raw = localStorage.getItem('user')
    return raw ? JSON.parse(raw) : null
  })
  const [loading, setLoading] = useState(false)

  useEffect(() => {
    if (user) {
      localStorage.setItem('token', user.token)
      localStorage.setItem('user', JSON.stringify(user))
    } else {
      localStorage.removeItem('token')
      localStorage.removeItem('user')
    }
  }, [user])

  const login = async (email, password) => {
    setLoading(true)
    try {
      const res = await api.post('/auth/login', { email, password })
      // backend expected: { token, rol, id_usuario, id_admin }
      const payload = {
        token: res.data.token,
        rol: res.data.rol,
        id_usuario: res.data.id_usuario || null,
        id_admin: res.data.id_admin || null,
        nombre: res.data.nombre || null,
        nombre_negocio: res.data.nombre_negocio || null
      }
      setUser(payload)
      return payload
    } finally {
      setLoading(false)
    }
  }

  const logout = () => setUser(null)

  return (
    <AuthContext.Provider value={{ user, login, logout, loading }}>
      {children}
    </AuthContext.Provider>
  )
}
----- .\src\context\ToastContext.jsx -----
import React, { createContext, useState, useCallback } from 'react'

export const ToastContext = createContext()

export const ToastProvider = ({ children }) => {
  const [toasts, setToasts] = useState([])

  const addToast = useCallback((message, type = 'info', timeout = 4000) => {
    const id = Date.now().toString()
    setToasts(prev => [...prev, { id, message, type }])
    setTimeout(() => {
      setToasts(prev => prev.filter(t => t.id !== id))
    }, timeout)
  }, [])

  const removeToast = useCallback((id) => setToasts(prev => prev.filter(t => t.id !== id)), [])

  return (
    <ToastContext.Provider value={{ toasts, addToast, removeToast }}>
      {children}
    </ToastContext.Provider>
  )
}

----- .\src\context\UIContext.jsx -----
import { createContext, useState } from 'react'

export const UIContext = createContext()

export const UIProvider = ({ children }) => {
  const [sidebarOpen, setSidebarOpen] = useState(false)

  const toggleSidebar = () => setSidebarOpen(!sidebarOpen)
  const closeSidebar = () => setSidebarOpen(false)

  return (
    <UIContext.Provider value={{ sidebarOpen, toggleSidebar, closeSidebar }}>
      {children}
    </UIContext.Provider>
  )
}

----- .\src\layouts\MainLayout.jsx -----
import React from 'react'
import Navbar from '../components/Navbar'
import Sidebar from '../components/Sidebar'
import ToastContainer from '../components/ToastContainer'

const MainLayout = ({ children }) => {
  return (
    <div className="min-h-screen bg-gray-100 flex flex-col">
      <Navbar />
      <div className="flex flex-1">
        <Sidebar />
        <main className="flex-1 p-6 overflow-auto">{children}</main>
      </div>
      <footer className="text-center text-sm text-gray-500 py-4">
        © {new Date().getFullYear()} Sistema de Ventas
      </footer>
      <ToastContainer />
    </div>
  )
}
export default MainLayout
----- .\src\pages\AdminPanel.jsx -----
import React, { useEffect, useState } from 'react'
import MainLayout from '../layouts/MainLayout'
import api from '../api/axios'
import SearchBar from '../components/SearchBar'
import DataTable from '../components/DataTable'

const AdminPanel = () => {
  const [admins, setAdmins] = useState([])
  const [nuevo, setNuevo] = useState({
    nombre_negocio: '',
    email_contacto: '',
    nombre_admin: '',
    email_admin: '',
    password_admin: ''
  })
  const [search, setSearch] = useState('')

  const fetchAdmins = async () => {
    try {
      const res = await api.get('/admins')
      setAdmins(res.data)
    } catch (e) {
      console.error(e)
    }
  }
  useEffect(() => { fetchAdmins() }, [])

  const crear = async (e) => {
    e.preventDefault()
    await api.post('/admins/crear', nuevo)
    setNuevo({
      nombre_negocio: '',
      email_contacto: '',
      nombre_admin: '',
      email_admin: '',
      password_admin: ''
    })
    fetchAdmins()
  }

  const adminsFiltrados = admins.filter(a =>
    a.nombre_negocio.toLowerCase().includes(search.toLowerCase()) ||
    a.admin_nombre?.toLowerCase().includes(search.toLowerCase())
  )

  return (
    <MainLayout>
      <div>
        <h1 className="text-2xl font-bold mb-4">Panel del Superadmin</h1>

        <form onSubmit={crear} className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-3">
          <input className="border p-2 rounded" placeholder="Nombre del negocio"
            value={nuevo.nombre_negocio}
            onChange={e => setNuevo({ ...nuevo, nombre_negocio: e.target.value })} />
          <input className="border p-2 rounded" placeholder="Email de contacto del negocio"
            value={nuevo.email_contacto}
            onChange={e => setNuevo({ ...nuevo, email_contacto: e.target.value })} />
          <input className="border p-2 rounded" placeholder="Nombre del administrador"
            value={nuevo.nombre_admin}
            onChange={e => setNuevo({ ...nuevo, nombre_admin: e.target.value })} />
          <input className="border p-2 rounded" placeholder="Email del administrador"
            value={nuevo.email_admin}
            onChange={e => setNuevo({ ...nuevo, email_admin: e.target.value })} />
          <input className="border p-2 rounded" type="password" placeholder="Contraseña del administrador"
            value={nuevo.password_admin}
            onChange={e => setNuevo({ ...nuevo, password_admin: e.target.value })} />
          <button className="bg-green-600 text-white px-4 py-2 rounded col-span-full">Crear negocio y admin</button>
        </form>

        <SearchBar value={search} onChange={setSearch} placeholder="Buscar negocio o admin..." />

        <DataTable
          columns={[
            { key: 'id_admin', label: '#', className: 'w-12 text-left align-middle' },
            { key: 'nombre_negocio', label: 'Negocio', className: 'w-1/3 text-left align-middle' },
            { key: 'email_contacto', label: 'Email contacto', className: 'w-1/4 text-left align-middle' },
            { key: 'admin_nombre', label: 'Administrador', className: 'w-1/4 text-left align-middle' },
            { key: 'admin_email', label: 'Email administrador', className: 'w-48 text-left align-middle' }
          ]}
          data={adminsFiltrados}
          rowKey="id_admin"
        />
      </div>
    </MainLayout>
  )
}
export default AdminPanel

----- .\src\pages\Clientes.jsx -----
import React, { useEffect, useState } from 'react'
import MainLayout from '../layouts/MainLayout'
import api from '../api/axios'
import SearchBar from '../components/SearchBar'
import DataTable from '../components/DataTable'


const Clientes = () => {
  const [clientes, setClientes] = useState([])
  const [nuevo, setNuevo] = useState({ nombre:'', telefono:'', direccion:'' , cedula: ''})

  const fetchClientes = async () => { try { const res = await api.get('/clientes'); setClientes(res.data) } catch (e) { console.error(e) } }
  useEffect(()=>{ fetchClientes() }, [])

  const crear = async (e) => { 
    e.preventDefault(); 
    try {
      await api.post('/clientes/crear', nuevo)
      setNuevo({ nombre:'', telefono:'', direccion:'',cedula: ''})
      fetchClientes()
    } catch (err) {
      console.error('Error crear cliente', err)
      alert(err.response?.data?.error || 'Error al crear cliente')
    }
  }

  const eliminar = async (id) => {
    if (!confirm('Eliminar cliente?')) return
    try {
      await api.delete(`/clientes/${id}`)
      fetchClientes()
    } catch (err) {
      console.error('Error eliminar cliente', err)
      alert(err.response?.data?.error || 'Error al eliminar cliente')
    }
  }
  
  const [search, setSearch] = useState('')
  const clientesFiltrados = clientes.filter(c =>
  c.nombre.toLowerCase().includes(search.toLowerCase()) ||
  c.telefono?.toLowerCase().includes(search.toLowerCase())
)

  return (
    <MainLayout>
      <div>
        <h1 className="text-2xl font-bold mb-4">Registra tus clientes</h1>
        
        <form onSubmit={crear} className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-3">
          <input className="border p-2 rounded" placeholder="Nombre" value={nuevo.nombre} onChange={e=>setNuevo({...nuevo,nombre:e.target.value})} />
          <input className="border p-2 rounded" placeholder="Teléfono" value={nuevo.telefono} onChange={e=>setNuevo({...nuevo,telefono:e.target.value})} />
          <input className="border p-2 rounded" placeholder="Dirección" value={nuevo.direccion} onChange={e=>setNuevo({...nuevo,direccion:e.target.value})} />
          <input className="border p-2 rounded" placeholder="Cédula" value={nuevo.cedula} onChange={e=>setNuevo({...nuevo,cedula:e.target.value})} />
          <button className="bg-blue-600 text-white px-4 py-2 rounded col-span-full">Crear cliente</button>
        </form>

        <h1 className="text-2xl font-bold mb-4">Mis clientes</h1>
        <SearchBar value={search} onChange={setSearch} placeholder="Buscar cliente..." />
        <DataTable
          columns={[
            { key: 'id_cliente', label: '#', className: 'w-12 text-left align-middle' },
            { key: 'nombre', label: 'Nombre', className: 'w-1/3 text-left align-middle' },
            { key: 'cedula', label: 'Cédula', className: 'w-1/4 text-left align-middle' },
            { key: 'telefono', label: 'Teléfono', className: 'w-1/4 text-left align-middle' },
            { key: 'direccion', label: 'Dirección', className: 'w-1/3 text-left align-middle' }
          ]}
          data={clientesFiltrados}
          rowKey="id_cliente"
          actions={(c) => (
            <>
              <button onClick={() => eliminar(c.id_cliente)} className="inline-block bg-red-100 text-red-700 text-sm font-medium px-3 py-1 rounded-full hover:bg-red-200 transition">Eliminar</button>
            </>
          )}
        />
      </div>
    </MainLayout>
  )
}
export default Clientes
----- .\src\pages\Dashboard.jsx -----
import React, { useContext } from 'react'
import MainLayout from '../layouts/MainLayout'
import { AuthContext } from '../context/AuthContext'

const DashboardContent = () => {
  const { user } = useContext(AuthContext)
  return (
    <div>
      <h2 className="text-2xl font-semibold mb-4">Panel Principal</h2>
      {user?.rol === 'superadmin' && (
        <p>Bienvenido Superadmin. Aquí puedes crear administradores y negocios.</p>
      )}
      {user?.rol === 'admin' && (
        <p>Bienvenido Admin. Puedes gestionar productos, clientes y trabajadores.</p>
      )}
      {['cajero','vendedor'].includes(user?.rol) && (
        <p>Bienvenido. Puedes acceder al módulo de facturación.</p>
      )}
    </div>
  )
}

const Dashboard = () => (
  <MainLayout>
    <DashboardContent />
  </MainLayout>
)
export default Dashboard
----- .\src\pages\Empleados.jsx -----
import React, { useEffect, useState, useContext } from 'react'
import MainLayout from '../layouts/MainLayout'
import api from '../api/axios'
import SearchBar from '../components/SearchBar'
import DataTable from '../components/DataTable'
import { ToastContext } from '../context/ToastContext'

const Empleados = () => {
  const [empleados, setEmpleados] = useState([])
  const { addToast } = useContext(ToastContext)
  const [nuevo, setNuevo] = useState({ nombre: '', email: '', password: '', rol: 'cajero' })
  const [search, setSearch] = useState('')
  const [error, setError] = useState(null)

  const fetchEmpleados = async () => {
    try {
      const res = await api.get('/users')
      setEmpleados(res.data)
    } catch (e) {
      console.error(e)
    }
  }

  useEffect(() => { fetchEmpleados() }, [])

  const crear = async (e) => {
    e.preventDefault()
    try {
      await api.post('/users/crear', nuevo)
      setNuevo({ nombre: '', email: '', password: '', rol: 'cajero' })
      fetchEmpleados()
    } catch (err) {
      setError(err.response?.data?.error || 'Error al crear empleado')
      addToast(err.response?.data?.error || 'Error al crear empleado', 'error')
    }
  }

  const editarEmpleado = async (empleado) => {
    // Pedimos datos simples vía prompt para no añadir UI extra
    const nombre = prompt('Nombre', empleado.nombre)
    if (nombre === null) return // cancel
    const email = prompt('Email', empleado.email)
    if (email === null) return
    const rol = prompt('Rol (cajero|vendedor)', empleado.rol)
    if (rol === null) return
    const password = prompt('Nueva contraseña (dejar vacío para no cambiar)')

    try {
      const payload = { nombre, email, rol }
      if (password && password.trim() !== '') payload.password = password
      await api.put(`/users/${empleado.id_usuario}`, payload)
      addToast('Empleado actualizado', 'success')
      fetchEmpleados()
    } catch (err) {
      console.error('Error actualizar empleado', err)
      addToast(err.response?.data?.error || 'Error al actualizar empleado', 'error')
    }
  }

  const eliminarEmpleado = async (id_usuario) => {
    if (!confirm('¿Eliminar empleado?')) return
    try {
      await api.delete(`/users/${id_usuario}`)
      addToast('Empleado eliminado', 'success')
      fetchEmpleados()
    } catch (err) {
      console.error('Error eliminar empleado', err)
      addToast(err.response?.data?.error || 'Error al eliminar empleado', 'error')
    }
  }

  const empleadosFiltrados = empleados.filter(e =>
    e.nombre.toLowerCase().includes(search.toLowerCase()) ||
    e.email.toLowerCase().includes(search.toLowerCase())
  )

  return (
    <MainLayout>
      <div>
        <h1 className="text-2xl font-bold mb-4">Empleados</h1>

        {error && <div className="text-red-600 mb-2">{error}</div>}

        <form onSubmit={crear} className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-3">
          <input
            className="border p-2 rounded"
            placeholder="Nombre del empleado"
            value={nuevo.nombre}
            onChange={(e) => setNuevo({ ...nuevo, nombre: e.target.value })}
          />
          <input
            className="border p-2 rounded"
            placeholder="Email del empleado"
            value={nuevo.email}
            onChange={(e) => setNuevo({ ...nuevo, email: e.target.value })}
          />
          <input
            type="password"
            className="border p-2 rounded"
            placeholder="Contraseña"
            value={nuevo.password}
            onChange={(e) => setNuevo({ ...nuevo, password: e.target.value })}
          />
          <select
            className="border p-2 rounded"
            value={nuevo.rol}
            onChange={(e) => setNuevo({ ...nuevo, rol: e.target.value })}
          >
            <option value="cajero">Cajero</option>
            <option value="vendedor">Vendedor</option>
          </select>
          <button className="bg-green-600 text-white px-4 py-2 rounded col-span-full">
            Crear empleado
          </button>
        </form>

        <SearchBar value={search} onChange={setSearch} placeholder="Buscar empleado o email..." />

        <DataTable
          columns={[
            { key: 'id_usuario', label: '#', className: 'w-12 text-left align-middle' },
            { key: 'nombre', label: 'Nombre', className: 'w-1/3 text-left align-middle' },
            { key: 'email', label: 'Email', className: 'w-1/3 text-left align-middle' },
            { key: 'rol', label: 'Rol', className: 'w-24 text-left align-middle' }
          ]}
          data={empleadosFiltrados}
          rowKey="id_usuario"
          actions={(u) => (
            <>
              <button onClick={() => editarEmpleado(u)} className="inline-block bg-yellow-100 text-yellow-800 text-sm font-medium px-3 py-1 rounded-full hover:bg-yellow-200 transition">Editar</button>
              <button onClick={() => eliminarEmpleado(u.id_usuario)} className="inline-block bg-red-100 text-red-700 text-sm font-medium px-3 py-1 rounded-full hover:bg-red-200 transition">Eliminar</button>
            </>
          )}
        />
      </div>
    </MainLayout>
  )
}

export default Empleados

----- .\src\pages\Facturas.jsx -----
// ✅ Facturas.jsx Mejorado con formato COP y total en tiempo real
import React, { useEffect, useState, useContext } from 'react';
import MainLayout from '../layouts/MainLayout';
import api from '../api/axios';
import { ToastContext } from '../context/ToastContext';

// ✅ Función para formatear moneda COP
const formatCurrency = (value) => {
  return new Intl.NumberFormat('es-CO', {
    style: 'currency',
    currency: 'COP',
    minimumFractionDigits: 0,
  }).format(value || 0);
};

const Facturas = () => {
  const [productos, setProductos] = useState([]);
  const [clientes, setClientes] = useState([]);
  const [items, setItems] = useState([]);
  const [suggestionsIndex, setSuggestionsIndex] = useState(-1);
  const [clienteSeleccionado, setClienteSeleccionado] = useState('');
  const [cedulaBusqueda, setCedulaBusqueda] = useState('');
  const [facturaCreada, setFacturaCreada] = useState(null);
  const [pagoCliente, setPagoCliente] = useState('');
  const [vuelto, setVuelto] = useState(0);
  const { addToast } = useContext(ToastContext);

  // ✅ Cargar productos y clientes
  useEffect(() => {
    api.get('/productos').then(r => setProductos(r.data));
    api.get('/clientes').then(r => setClientes(r.data));
  }, []);

  // ✅ Total actual en tiempo real
  const totalActual = items.reduce((sum, item) => {
    const producto = productos.find(p => p.id_producto == item.id_producto);
    return sum + (producto ? producto.precio * item.cantidad : 0);
  }, 0);

  // ✅ Calcular vuelto con totalActual
  useEffect(() => {
    const pago = Number(pagoCliente) || 0;
    setVuelto(pago - totalActual);
  }, [pagoCliente, totalActual]);

  const addItem = () =>
    setItems([...items, { id_producto: productos[0]?.id_producto || '', cantidad: 1, query: productos[0]?.nombre || '' }]);

  const updateItem = (idx, field, value) => {
    const newItems = [...items];
    // normalizar cantidad a número
    if (field === 'cantidad') {
      newItems[idx][field] = Number(value);
    } else {
      newItems[idx][field] = value;
    }
    setItems(newItems);
  };

  const removeItem = (idx) => {
    setItems(prev => prev.filter((_, i) => i !== idx));
  };

  const crearFactura = async (e) => {
    e.preventDefault();
    const payload = {
      productos: items.map(i => ({ id_producto: Number(i.id_producto), cantidad: Number(i.cantidad) })),
      id_cliente: clienteSeleccionado || null,
    };
    const res = await api.post('/facturas/crear', payload);
    setFacturaCreada(res.data);
    setItems([]);
    setClienteSeleccionado('');
    setPagoCliente('');
  };

  const buscarClientePorCedula = () => {
    const ced = cedulaBusqueda.trim();
    if (!ced) return addToast('Ingresa la cédula a buscar', 'error');
    const encontrado = clientes.find(c => String(c.cedula) === ced);
    if (encontrado) {
      setClienteSeleccionado(encontrado.id_cliente);
      setCedulaBusqueda('');
    } else {
      addToast('Cliente no encontrado', 'error');
    }
  };

  const clienteObj = clientes.find(c => String(c.id_cliente) === String(clienteSeleccionado));

  return (
    <MainLayout>
      <div className="max-w-6xl mx-auto p-6">
        <h1 className="text-3xl font-bold mb-6">Crear Factura</h1>

        <form onSubmit={crearFactura}>
          <div className="grid grid-cols-1 md:grid-cols-12 gap-6">
            {/* Left: productos (col-span 8) */}
            <div className="md:col-span-8 bg-white p-6 rounded-xl shadow">
              <h2 className="text-xl font-semibold mb-4">Productos</h2>
              <div className="max-h-72 overflow-auto">
                {items.map((it, idx) => {
                  const q = String(it.query || '');
                  const filtered = productos.filter(p => p.nombre.toLowerCase().includes(q.toLowerCase()));
                  return (
                    <div key={idx} className="relative flex gap-4 mb-2 items-center">
                      <div className="flex-1">
                        <input
                          className="w-full border border-gray-300 p-2 rounded-lg"
                          value={it.query || ''}
                          onChange={e => updateItem(idx, 'query', e.target.value)}
                          onFocus={() => setSuggestionsIndex(idx)}
                          onBlur={() => setTimeout(() => setSuggestionsIndex(-1), 150)}
                          placeholder="Escribe para buscar producto..."
                        />
                        {suggestionsIndex === idx && filtered.length > 0 && (
                          <ul className="absolute z-20 bg-white border rounded mt-1 max-h-40 overflow-auto w-full shadow">
                            {filtered.map(p => (
                              <li key={p.id_producto} className="p-2 hover:bg-gray-100 cursor-pointer"
                                onMouseDown={() => {
                                  // seleccionar producto
                                  updateItem(idx, 'id_producto', p.id_producto);
                                  updateItem(idx, 'query', p.nombre);
                                  setSuggestionsIndex(-1);
                                }}>
                                {p.nombre} — {formatCurrency(p.precio)}
                              </li>
                            ))}
                          </ul>
                        )}
                      </div>
                      <input type="number" className="w-24 border border-gray-300 p-2 rounded-lg " value={it.cantidad}
                        onChange={e => updateItem(idx, 'cantidad', e.target.value)} />
                      <button type="button" onClick={() => removeItem(idx)} className="ml-2 text-sm bg-red-100 text-red-700 px-3 py-1 rounded">Eliminar</button>
                    </div>
                  );
                })}
              </div>
              <div className="mt-3">
                <button type="button" onClick={addItem} className="bg-green-600 text-white px-4 py-2 rounded-lg">Añadir producto</button>
              </div>
            </div>

            {/* Right: cliente + total (col-span 4) */}
            <div className="md:col-span-4 space-y-4">
              <div className="bg-white p-6 rounded-xl shadow">
                <h2 className="text-xl font-semibold mb-3">Datos del Cliente</h2>
                <label className="block text-sm text-black-400 mb-1">Cliente (opcional):</label>
                <select className="w-full border border-gray-300 p-2 rounded-lg mb-3" value={clienteSeleccionado} onChange={e => setClienteSeleccionado(e.target.value)}>
                  <option value="">Sin cliente</option>
                  {clientes.map(c => <option key={c.id_cliente} value={c.id_cliente}>{c.nombre}</option>)}
                </select>

                <label className="block text-sm text-black-400 mb-1">Buscar por cédula:</label>
                <div className="flex gap-2 mb-3">
                  <input className="flex-1 min-w-0 border-gray-300 p-2 rounded-lg" value={cedulaBusqueda} onChange={e => setCedulaBusqueda(e.target.value)} placeholder="Cédula" />
                  <button type="button" onClick={buscarClientePorCedula} className="flex-shrink-0 bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded-lg">Buscar</button>
                </div>

                {clienteObj && (
                  <div className="mt-2 p-3 bg-gray-50 border rounded-lg">
                    <p className="font-medium">{clienteObj.nombre}</p>
                    <p className="text-sm text-black-400">Cédula: {clienteObj.cedula}</p>
                    <button type="button" onClick={() => setClienteSeleccionado('')} className="text-sm text-red-600 mt-2">Quitar</button>
                  </div>
                )}
              </div>

              <div className="bg-white p-6 rounded-xl shadow">
                <p className="text-lg font-semibold mb-2">Total</p>
                <p className="text-2xl font-bold mb-4">{formatCurrency(totalActual)}</p>
                <label className="block text-sm text-black-400 mb-1 ">Monto pagado</label>
                <input type="text" className="w-full p-2 rounded-lg mb-3 border border-black"
                  placeholder="Ej: 50.000"
                  value={pagoCliente ? formatCurrency(pagoCliente) : ''}
                  onChange={(e) => { const raw = e.target.value.replace(/[^0-9]/g, ''); setPagoCliente(raw); }} />
                <p className="text-sm text-black-400">Vuelto: {formatCurrency(vuelto)}</p>
              </div>

              <div className="sticky bottom-6">
                <button type="submit" disabled={items.length === 0} className={`w-full py-3 rounded-lg text-white font-semibold ${items.length === 0 ? 'bg-gray-400' : 'bg-blue-600 hover:bg-blue-700'}`}>Crear factura</button>
              </div>
            </div>
          </div>
        </form>

        {/* Modal simple para factura creada */}
        {facturaCreada && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-xl shadow max-w-md w-full">
              <h2 className="text-xl font-semibold mb-3">Factura #{facturaCreada.id_factura}</h2>
              <p>Total: {formatCurrency(facturaCreada.total)}</p>
              <p>Cliente: {facturaCreada.cliente || 'N/A'}</p>
              <p>Fecha: {new Date(facturaCreada.fecha).toLocaleString()}</p>
              <p>Vuelto: {formatCurrency(vuelto)}</p>
              <div className="mt-4 flex justify-end">
                <button onClick={() => setFacturaCreada(null)} className="bg-blue-600 text-white px-4 py-2 rounded-lg">Cerrar</button>
              </div>
            </div>
          </div>
        )}
      </div>
    </MainLayout>
  );
};

export default Facturas;

----- .\src\pages\FacturasList.jsx -----
import React, { useEffect, useState, useContext } from 'react'
import MainLayout from '../layouts/MainLayout'
import api from '../api/axios'
import SearchBar from '../components/SearchBar'
import DataTable from '../components/DataTable'
import { ToastContext } from '../context/ToastContext'

const FacturasList = () => {
  const [facturas, setFacturas] = useState([])
  const { addToast } = useContext(ToastContext)

  useEffect(() => {
    api.get('/facturas').then(res => setFacturas(res.data))
  }, [])

  const eliminarFactura = async (id) => {
    if (!confirm('¿Eliminar factura?')) return
    try {
      await api.delete(`/facturas/${id}`)
      setFacturas(prev => prev.filter(f => f.id_factura !== id))
    } catch (err) {
      console.error('Error eliminar factura', err)
      addToast(err.response?.data?.error || 'Error al eliminar factura', 'error')
    }
  }



  const [search, setSearch] = useState('')
  const facturasFiltradas = facturas.filter(f =>
  f.cliente.toLowerCase().includes(search.toLowerCase()) ||
  f.vendedor.toLowerCase().includes(search.toLowerCase())
)


  return (
    <MainLayout>
      <h1 className="text-2xl font-bold mb-4">Listado de Facturas</h1>
      <SearchBar value={search} onChange={setSearch} placeholder="Buscar por cliente o vendedor..." />

      <DataTable
        columns={[
          { key: 'id_factura', label: '#', className: 'w-12 text-left align-middle' },
          { key: 'cliente', label: 'Cliente', className: 'w-1/3 text-left align-middle' },
          { key: 'total', label: 'Total', className: 'w-1/4 text-left align-middle', render: (r) => `$${r.total}` },
          { key: 'fecha', label: 'Fecha', className: 'w-1/3 text-left align-middle', render: (r) => new Date(r.fecha).toLocaleString() }
        ]}
        data={facturasFiltradas}
        rowKey="id_factura"
        actions={(f) => (
          <>
            <button onClick={() => eliminarFactura(f.id_factura)} className="inline-block bg-red-100 text-red-700 text-sm font-medium px-3 py-1 rounded-full hover:bg-red-200 transition">Eliminar</button>
          </>
        )}
      />
    </MainLayout>
  )
}
export default FacturasList

----- .\src\pages\Home.jsx -----
import React from "react";
import { Link } from "react-router-dom";

export default function Home() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-blue-100 flex flex-col">
      {/* NAVBAR */}
      <header className="flex justify-between items-center px-6 py-4 bg-white shadow">
        <h1 className="text-2xl font-bold text-blue-700">
          Sistema de Ventas POS e Inventario
        </h1>
        <Link
          to="/login"
          className="bg-blue-600 text-white px-5 py-2 rounded-lg hover:bg-blue-700 transition font-medium"
        >
          Ingresar al sistema
        </Link>
      </header>

      {/* CONTENIDO PRINCIPAL */}
      <main className="flex-1 flex flex-col md:flex-row items-center justify-center gap-30 px-6">
        <div className="max-w-lg text-center md:text-left">
          <h2 className="text-4xl md:text-5xl font-extrabold text-gray-800 mb-6 leading-tight">
            Control total de tus ventas y tu inventario
          </h2>
          <p className="text-gray-600 text-lg mb-8">
            Gestiona tus productos, clientes y facturas desde un solo lugar.
            Nuestro sistema te ofrece rapidez, seguridad y control para tu negocio.
          </p>
          <Link
            to="/login"
            className="inline-block bg-blue-600 text-white px-8 py-3 rounded-lg text-lg hover:bg-blue-700 transition"
          >
            Comenzar ahora
          </Link>
        </div>

        <div className="max-w-md animate-fadeIn">
          <img
            src="https://cdn-icons-png.flaticon.com/512/950/950258.png"
            alt="Ilustración de ventas e inventario"
            className="w-3/4 drop-shadow-xl"
          />
        </div>
      </main>

      <footer className="text-center py-4 text-gray-500 text-sm">
        © {new Date().getFullYear()} Sistema de Ventas POS e Inventario
      </footer>
    </div>
  );
}

----- .\src\pages\Login.jsx -----
import React, { useState, useContext } from 'react'
import { useNavigate } from 'react-router-dom'
import { AuthContext } from '../context/AuthContext'

const Login = () => {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const { login } = useContext(AuthContext)
  const navigate = useNavigate()
  const [error, setError] = useState(null)

  const submit = async (e) => {
    e.preventDefault()
    try {
      await login(email, password)
      navigate('/dashboard')
    } catch (err) {
      setError(err.response?.data?.error || 'Credenciales inválidas')
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50">
      <form 
        onSubmit={submit} 
        className="bg-white p-12 rounded-2xl shadow-lg w-full max-w-sm flex flex-col gap-5 h-[400px]"
      >
        <h2 className="text-2xl font-bold text-center">Iniciar sesión</h2>

        {error && <div className="text-red-600 text-center">{error}</div>}

        <input 
          value={email} 
          onChange={e=>setEmail(e.target.value)} 
          placeholder="Email" 
          className="w-full border p-3 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" 
        />
        <input 
          value={password} 
          onChange={e=>setPassword(e.target.value)} 
          type="password" 
          placeholder="Contraseña" 
          className="w-full border p-3 rounded focus:outline-none focus:ring-2 focus:ring-blue-500" 
        />
        <button className="w-full bg-blue-600 text-white p-3 rounded hover:bg-blue-700 transition">
          Entrar
        </button>
      </form>
    </div>
  )
}
export default Login

----- .\src\pages\Productos.jsx -----
import React, { useEffect, useState, useContext } from 'react';
import MainLayout from '../layouts/MainLayout';
import api from '../api/axios';
import { AuthContext } from '../context/AuthContext';
import SearchBar from '../components/SearchBar';
import DataTable from '../components/DataTable';

const Productos = () => {
  const [productos, setProductos] = useState([]);
  const [nuevo, setNuevo] = useState({ nombre: '', precio: '', precio_compra: '', stock: 0 });
  const [error, setError] = useState(null);
  const [search, setSearch] = useState('');
  const { user } = useContext(AuthContext);

  useEffect(() => {
    fetchProductos();
  }, []);

  const fetchProductos = async () => {
    try {
      const res = await api.get('/productos');
      setProductos(res.data);
    } catch (e) {
      console.error("Error al obtener productos", e);
    }
  };

  // 🔹 Función para limpiar valores monetarios
  const limpiarNumero = (valor) => {
    return Number(String(valor).replace(/[^0-9]/g, '')) || 0;
  };

  // 👉 Función para formatear número como moneda local COP (ej: 50.000)
  const formatCOP = (value) => {
    if (!value) return '';
    return new Intl.NumberFormat('es-CO').format(value);
  };

  const crear = async (e) => {
    e.preventDefault();
    try {
      await api.post('/productos/crear', {
        nombre: nuevo.nombre,
        precio: limpiarNumero(nuevo.precio),
        precio_compra: limpiarNumero(nuevo.precio_compra),
        stock: limpiarNumero(nuevo.stock)
      });

      setNuevo({ nombre: '', precio: '', precio_compra: '', stock: 0 });
      fetchProductos();
    } catch (err) {
      setError(err.response?.data?.error || 'Error al crear producto');
    }
  };

  const eliminar = async (id) => {
    if (!confirm('¿Eliminar producto?')) return;
    await api.delete(`/productos/${id}`);
    fetchProductos();
  };

  const productosFiltrados = productos.filter(p =>
    p.nombre.toLowerCase().includes(search.toLowerCase())
  );

  return (
    <MainLayout>
      <div>
        <h1 className="text-2xl font-bold mb-4">Añade tus productos</h1>
        {error && <div className="text-red-600 mb-2">{error}</div>}

        {(user?.rol === 'admin' || user?.rol === 'superadmin') && (
          <form onSubmit={crear} className="mb-4 flex gap-2 flex-wrap">

            {/* Nombre */}
            <input
              className="border p-2 rounded"
              placeholder="Nombre"
              value={nuevo.nombre}
              onChange={e => setNuevo({ ...nuevo, nombre: e.target.value })}
            />

            {/* ✅ Precio con formato al escribir */}
            <input
              className="border p-2 rounded"
              placeholder="Precio"
              value={nuevo.precio ? formatCOP(nuevo.precio) : ''}
              onChange={(e) => {
                const raw = limpiarNumero(e.target.value);
                setNuevo({ ...nuevo, precio: raw });
              }}
            />

            {/* ✅ Precio de compra también con formato */}
            <input
              className="border p-2 rounded"
              placeholder="Precio compra"
              value={nuevo.precio_compra ? formatCOP(nuevo.precio_compra) : ''}
              onChange={(e) => {
                const raw = limpiarNumero(e.target.value);
                setNuevo({ ...nuevo, precio_compra: raw });
              }}
            />

            <input
              className="border p-2 rounded"
              placeholder="Stock"
              value={nuevo.stock}
              onChange={e => setNuevo({ ...nuevo, stock: limpiarNumero(e.target.value) })}
            />

            <button className="bg-green-600 text-white px-4 rounded hover:bg-green-700">
              Crear
            </button>
          </form>
        )}

        <h1 className="text-2xl font-bold mb-4">Productos</h1>

        <SearchBar value={search} onChange={setSearch} placeholder="Buscar producto..." />

        <DataTable
          columns={[
            { key: 'id_producto', label: '#', className: 'w-12 text-left' },
            { key: 'nombre', label: 'Nombre', className: 'w-1/3 text-left' },
            { key: 'precio', label: 'Precio', className: 'w-24 text-right', render: (r) => r.precio },
            { key: 'stock', label: 'Stock', className: 'w-24 text-left' }
          ]}
          data={productosFiltrados}
          rowKey="id_producto"
          actions={(p) => (
            <>
              <button
                onClick={() => eliminar(p.id_producto)}
                className="bg-red-100 text-red-700 text-sm px-3 py-1 rounded-full hover:bg-red-200"
              >
                Eliminar
              </button>

              <button
                onClick={() => {
                  const cantidad = prompt("¿Cuántas unidades deseas añadir?");
                  if (cantidad && !isNaN(cantidad)) {
                    api.put(`/productos/${p.id_producto}/anadir-stock`, { cantidad: Number(cantidad) })
                      .then(() => fetchProductos())
                      .catch(err => alert(err.response?.data?.error || "Error al añadir stock"));
                  }
                }}
                className="bg-green-100 text-green-700 text-sm px-3 py-1 rounded-full hover:bg-green-200"
              >
                + Añadir stock
              </button>
            </>
          )}
        />
      </div>
    </MainLayout>
  );
};

export default Productos;

----- .\src\pages\Reportes.jsx -----
import React, { useState, useContext } from 'react';
import MainLayout from '../layouts/MainLayout';
import api from '../api/axios';
import DataTable from '../components/DataTable';
import { ToastContext } from '../context/ToastContext';

const formatCurrency = (value) => new Intl.NumberFormat('es-CO', {
  style: 'currency',
  currency: 'COP',
  minimumFractionDigits: 0,
}).format(value || 0);

const Reportes = () => {
  const [inicio, setInicio] = useState('');
  const [fin, setFin] = useState('');
  const [reporte, setReporte] = useState(null);
  const { addToast } = useContext(ToastContext);

  const generarReporte = async (e) => {
    e.preventDefault();
    if (!inicio || !fin) return addToast('Selecciona ambas fechas', 'error');

    try {
      const res = await api.get(`/facturas/reporte?inicio=${inicio}&fin=${fin}`);
      setReporte(res.data);
    } catch (err) {
      console.error(err);
      addToast('Error generando reporte', 'error');
    }
  };

  return (
    <MainLayout>
      <div className="max-w-6xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">📊 Reporte de Ventas</h1>

        <form onSubmit={generarReporte} className="flex flex-col md:flex-row gap-4 mb-6">
          <div>
            <label className="text-sm font-medium">Fecha inicio</label>
            <input type="date" value={inicio} onChange={(e) => setInicio(e.target.value)}
              className="border p-2 rounded w-full" />
          </div>
          <div>
            <label className="text-sm font-medium">Fecha fin</label>
            <input type="date" value={fin} onChange={(e) => setFin(e.target.value)}
              className="border p-2 rounded w-full" />
          </div>
          <button className="bg-blue-600 text-white px-6 py-2 rounded mt-6 md:mt-0">
            Generar Reporte
          </button>
        </form>

        {/* Si ya hay reporte */}
        {reporte && (
          <div>
            <div className="bg-white p-4 rounded shadow mb-6">
              <p><strong>Fecha:</strong> {reporte.inicio} — {reporte.fin}</p>
              <p><strong>Total ventas:</strong> {formatCurrency(reporte.total_ventas)}</p>
              <p><strong>Ganancia total:</strong> {formatCurrency(reporte.total_ganancia)}</p>
              <p><strong>Facturas generadas:</strong> {reporte.cantidad_facturas}</p>
            </div>

            <h2 className="text-xl font-bold mb-3">Detalle de facturas</h2>
            <DataTable
              columns={[
                { key: 'id_factura', label: '#', className: 'w-12' },
                { key: 'fecha', label: 'Fecha', render: (f) => new Date(f.fecha).toLocaleString() },
                { key: 'cliente', label: 'Cliente' },
                { key: 'vendedor', label: 'Vendedor' },
                { key: 'total', label: 'Total', render: (f) => formatCurrency(f.total) },
                { key: 'ganancia', label: 'Ganancia', render: (f) => formatCurrency(f.ganancia) },
              ]}
              data={reporte.detalle}
              rowKey="id_factura"
            />
          </div>
        )}
      </div>
    </MainLayout>
  );
};

export default Reportes;
